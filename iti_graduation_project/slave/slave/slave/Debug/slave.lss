
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fac  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d6  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000561  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080f  00000000  00000000  000032b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_10>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	76 01       	movw	r14, r12
  56:	7b 01       	movw	r14, r22
  58:	80 01       	movw	r16, r0
  5a:	67 01       	movw	r12, r14
  5c:	67 01       	movw	r12, r14
  5e:	85 01       	movw	r16, r10
  60:	67 01       	movw	r12, r14
  62:	67 01       	movw	r12, r14
  64:	67 01       	movw	r12, r14
  66:	67 01       	movw	r12, r14
  68:	67 01       	movw	r12, r14
  6a:	67 01       	movw	r12, r14
  6c:	67 01       	movw	r12, r14
  6e:	67 01       	movw	r12, r14
  70:	67 01       	movw	r12, r14
  72:	67 01       	movw	r12, r14
  74:	90 01       	movw	r18, r0
  76:	95 01       	movw	r18, r10
  78:	9a 01       	movw	r18, r20
  7a:	67 01       	movw	r12, r14
  7c:	67 01       	movw	r12, r14
  7e:	9f 01       	movw	r18, r30

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf e5       	ldi	r28, 0x5F	; 95
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_clear_bss>:
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a6 36       	cpi	r26, 0x66	; 102
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  a0:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <ADC_vinit>:
#include "std_macros.h"
#include "STD_Types.h"
void ADC_vinit(void)
{
	/*configure VREF to the internal voltage(2.56 V)*/
	SET_BIT(ADMUX,REFS0);
  a8:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  aa:	3f 9a       	sbi	0x07, 7	; 7
	/*************************************/
	SET_BIT(ADCSRA,ADEN); // ENable ADC
  ac:	37 9a       	sbi	0x06, 7	; 6
	
	/* adjust ADC clock by select the division factor----->64*/
	SET_BIT(ADCSRA,ADPS2);
  ae:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
  b0:	31 9a       	sbi	0x06, 1	; 6
  b2:	08 95       	ret

000000b4 <ADC_u16Read>:
	/***********************************/
}
uint16 ADC_u16Read(void)
{
	uint16 read_val; // which contain the converted value which will be returned
	SET_BIT(ADCSRA,ADSC); // start the ADC conversion
  b4:	36 9a       	sbi	0x06, 6	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1 when conversion complete
  b6:	34 9b       	sbis	0x06, 4	; 6
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
  ba:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL); //reas the ADCL register
  bc:	84 b1       	in	r24, 0x04	; 4
	read_val|=(ADCH<<8);//read the whole register
  be:	25 b1       	in	r18, 0x05	; 5
	return read_val ; // return the converted value
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	92 2b       	or	r25, r18
  c4:	08 95       	ret

000000c6 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
  c6:	82 34       	cpi	r24, 0x42	; 66
  c8:	19 f1       	breq	.+70     	; 0x110 <DIO_vsetPINDir+0x4a>
  ca:	18 f4       	brcc	.+6      	; 0xd2 <DIO_vsetPINDir+0xc>
  cc:	81 34       	cpi	r24, 0x41	; 65
  ce:	39 f0       	breq	.+14     	; 0xde <DIO_vsetPINDir+0x18>
  d0:	08 95       	ret
  d2:	83 34       	cpi	r24, 0x43	; 67
  d4:	b1 f1       	breq	.+108    	; 0x142 <DIO_vsetPINDir+0x7c>
  d6:	84 34       	cpi	r24, 0x44	; 68
  d8:	09 f4       	brne	.+2      	; 0xdc <DIO_vsetPINDir+0x16>
  da:	4c c0       	rjmp	.+152    	; 0x174 <DIO_vsetPINDir+0xae>
  dc:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	59 f4       	brne	.+22     	; 0xf8 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  e2:	2a b3       	in	r18, 0x1a	; 26
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_vsetPINDir+0x28>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_vsetPINDir+0x24>
  f2:	82 2b       	or	r24, r18
  f4:	8a bb       	out	0x1a, r24	; 26
  f6:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_vsetPINDir+0x3e>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_vsetPINDir+0x3a>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	8a bb       	out	0x1a, r24	; 26
 10e:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 110:	41 30       	cpi	r20, 0x01	; 1
 112:	59 f4       	brne	.+22     	; 0x12a <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 114:	27 b3       	in	r18, 0x17	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_vsetPINDir+0x5a>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_vsetPINDir+0x56>
 124:	82 2b       	or	r24, r18
 126:	87 bb       	out	0x17, r24	; 23
 128:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 12a:	27 b3       	in	r18, 0x17	; 23
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0x70>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0x6c>
 13a:	80 95       	com	r24
 13c:	82 23       	and	r24, r18
 13e:	87 bb       	out	0x17, r24	; 23
 140:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 142:	41 30       	cpi	r20, 0x01	; 1
 144:	59 f4       	brne	.+22     	; 0x15c <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 146:	24 b3       	in	r18, 0x14	; 20
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetPINDir+0x8c>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetPINDir+0x88>
 156:	82 2b       	or	r24, r18
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 15c:	24 b3       	in	r18, 0x14	; 20
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_vsetPINDir+0xa2>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_vsetPINDir+0x9e>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	84 bb       	out	0x14, r24	; 20
 172:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	59 f4       	brne	.+22     	; 0x18e <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 178:	21 b3       	in	r18, 0x11	; 17
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_vsetPINDir+0xbe>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_vsetPINDir+0xba>
 188:	82 2b       	or	r24, r18
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 18e:	21 b3       	in	r18, 0x11	; 17
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_vsetPINDir+0xd4>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_vsetPINDir+0xd0>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	81 bb       	out	0x11, r24	; 17
 1a4:	08 95       	ret

000001a6 <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
 1a6:	82 34       	cpi	r24, 0x42	; 66
 1a8:	19 f1       	breq	.+70     	; 0x1f0 <DIO_write+0x4a>
 1aa:	18 f4       	brcc	.+6      	; 0x1b2 <DIO_write+0xc>
 1ac:	81 34       	cpi	r24, 0x41	; 65
 1ae:	39 f0       	breq	.+14     	; 0x1be <DIO_write+0x18>
 1b0:	08 95       	ret
 1b2:	83 34       	cpi	r24, 0x43	; 67
 1b4:	b1 f1       	breq	.+108    	; 0x222 <DIO_write+0x7c>
 1b6:	84 34       	cpi	r24, 0x44	; 68
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_write+0x16>
 1ba:	4c c0       	rjmp	.+152    	; 0x254 <DIO_write+0xae>
 1bc:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 1c2:	2b b3       	in	r18, 0x1b	; 27
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_write+0x28>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_write+0x24>
 1d2:	82 2b       	or	r24, r18
 1d4:	8b bb       	out	0x1b, r24	; 27
 1d6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1d8:	2b b3       	in	r18, 0x1b	; 27
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_write+0x3e>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_write+0x3a>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	59 f4       	brne	.+22     	; 0x20a <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_write+0x5a>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_write+0x56>
 204:	82 2b       	or	r24, r18
 206:	88 bb       	out	0x18, r24	; 24
 208:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 20a:	28 b3       	in	r18, 0x18	; 24
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_write+0x70>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_write+0x6c>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	88 bb       	out	0x18, r24	; 24
 220:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	59 f4       	brne	.+22     	; 0x23c <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 226:	25 b3       	in	r18, 0x15	; 21
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_write+0x8c>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_write+0x88>
 236:	82 2b       	or	r24, r18
 238:	85 bb       	out	0x15, r24	; 21
 23a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 23c:	25 b3       	in	r18, 0x15	; 21
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_write+0xa2>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_write+0x9e>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	85 bb       	out	0x15, r24	; 21
 252:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	59 f4       	brne	.+22     	; 0x26e <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_write+0xbe>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_write+0xba>
 268:	82 2b       	or	r24, r18
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 26e:	22 b3       	in	r18, 0x12	; 18
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0xd4>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0xd0>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	82 bb       	out	0x12, r24	; 18
 284:	08 95       	ret

00000286 <LED_vInit>:

#include "LED.h"

void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	0e 94 63 00 	call	0xc6	; 0xc6 <DIO_vsetPINDir>
 28c:	08 95       	ret

0000028e <LED_vTurnOn>:
}
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
 294:	08 95       	ret

00000296 <LED_vTurnOff>:
}
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
 29c:	08 95       	ret

0000029e <main>:
uint8 request;
int main(void)
{

	
		ADC_vinit();
 29e:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_vinit>
	timer0_initializeCTC();
 2a2:	0e 94 07 02 	call	0x40e	; 0x40e <timer0_initializeCTC>
	SPI_vInitSlave();
 2a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SPI_vInitSlave>
	LED_vInit(AIR_COND_PORT,AIR_COND_PIN);
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	84 e4       	ldi	r24, 0x44	; 68
 2ae:	0e 94 43 01 	call	0x286	; 0x286 <LED_vInit>
	LED_vInit(ROOM1_PORT,ROOM1_PIN);
 2b2:	64 e0       	ldi	r22, 0x04	; 4
 2b4:	84 e4       	ldi	r24, 0x44	; 68
 2b6:	0e 94 43 01 	call	0x286	; 0x286 <LED_vInit>
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
 2ba:	65 e0       	ldi	r22, 0x05	; 5
 2bc:	84 e4       	ldi	r24, 0x44	; 68
 2be:	0e 94 43 01 	call	0x286	; 0x286 <LED_vInit>
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
 2c2:	66 e0       	ldi	r22, 0x06	; 6
 2c4:	84 e4       	ldi	r24, 0x44	; 68
 2c6:	0e 94 43 01 	call	0x286	; 0x286 <LED_vInit>
			break;
			
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);
			air_conadtion_stat=1;
 2ca:	c1 e0       	ldi	r28, 0x01	; 1
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
	LED_vInit(ROOM1_PORT,ROOM1_PIN);
	LED_vInit(ROOM2_PORT,ROOM2_PIN);
	LED_vInit(ROOM3_PORT,ROOM3_PIN);
	while(1)
	{
		request = SPI_ui8TransmitRecive(DEFAULT_ACK);
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	0e 94 02 02 	call	0x404	; 0x404 <SPI_ui8TransmitRecive>
 2d4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <request>
		switch (request)
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	b1 97       	sbiw	r30, 0x21	; 33
 2de:	e6 31       	cpi	r30, 0x16	; 22
 2e0:	f1 05       	cpc	r31, r1
 2e2:	a8 f7       	brcc	.-22     	; 0x2ce <main+0x30>
 2e4:	e6 5d       	subi	r30, 0xD6	; 214
 2e6:	ff 4f       	sbci	r31, 0xFF	; 255
 2e8:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__tablejump2__>
		{
			case ROOM1_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM1_PIN);
 2ec:	64 e0       	ldi	r22, 0x04	; 4
 2ee:	84 e4       	ldi	r24, 0x44	; 68
 2f0:	0e 94 47 01 	call	0x28e	; 0x28e <LED_vTurnOn>
			break;
 2f4:	ec cf       	rjmp	.-40     	; 0x2ce <main+0x30>
			case ROOM2_TURN_ON:
			LED_vTurnOn(ROOM1_PORT,ROOM2_PIN);
 2f6:	65 e0       	ldi	r22, 0x05	; 5
 2f8:	84 e4       	ldi	r24, 0x44	; 68
 2fa:	0e 94 47 01 	call	0x28e	; 0x28e <LED_vTurnOn>
			break;
 2fe:	e7 cf       	rjmp	.-50     	; 0x2ce <main+0x30>
			case ROOM3_TURN_ON:
			LED_vTurnOn(ROOM3_PORT,ROOM3_PIN);
 300:	66 e0       	ldi	r22, 0x06	; 6
 302:	84 e4       	ldi	r24, 0x44	; 68
 304:	0e 94 47 01 	call	0x28e	; 0x28e <LED_vTurnOn>
			break;
 308:	e2 cf       	rjmp	.-60     	; 0x2ce <main+0x30>
			
			case AIR_COND_TURN_ON:
			timer0_initializeCTC();
 30a:	0e 94 07 02 	call	0x40e	; 0x40e <timer0_initializeCTC>
			LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	84 e4       	ldi	r24, 0x44	; 68
 312:	0e 94 47 01 	call	0x28e	; 0x28e <LED_vTurnOn>
			air_conadtion_stat=1;
 316:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <_edata+0x1>
 31a:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <_edata>
			break;
 31e:	d7 cf       	rjmp	.-82     	; 0x2ce <main+0x30>
			case ROOM1_TURN_OFF:
			LED_vTurnOff(ROOM1_PORT,ROOM1_PIN);
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	84 e4       	ldi	r24, 0x44	; 68
 324:	0e 94 4b 01 	call	0x296	; 0x296 <LED_vTurnOff>
			break;
 328:	d2 cf       	rjmp	.-92     	; 0x2ce <main+0x30>
			case ROOM2_TURN_OFF:
			LED_vTurnOff(ROOM2_PORT,ROOM2_PIN);
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	84 e4       	ldi	r24, 0x44	; 68
 32e:	0e 94 4b 01 	call	0x296	; 0x296 <LED_vTurnOff>
			break;
 332:	cd cf       	rjmp	.-102    	; 0x2ce <main+0x30>
			case ROOM3_TURN_OFF:
			LED_vTurnOff(ROOM3_PORT,ROOM3_PIN);
 334:	66 e0       	ldi	r22, 0x06	; 6
 336:	84 e4       	ldi	r24, 0x44	; 68
 338:	0e 94 4b 01 	call	0x296	; 0x296 <LED_vTurnOff>
			break;
 33c:	c8 cf       	rjmp	.-112    	; 0x2ce <main+0x30>
			
			case AIR_COND_TURN_OFF:
			timer0_stop();
 33e:	0e 94 1d 02 	call	0x43a	; 0x43a <timer0_stop>
			LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	84 e4       	ldi	r24, 0x44	; 68
 346:	0e 94 4b 01 	call	0x296	; 0x296 <LED_vTurnOff>
			air_conadtion_stat=0;
 34a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 34e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			break;
 352:	bd cf       	rjmp	.-134    	; 0x2ce <main+0x30>

00000354 <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	4f 93       	push	r20
 364:	5f 93       	push	r21
 366:	6f 93       	push	r22
 368:	7f 93       	push	r23
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	counter++;
 376:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>
	if(counter>=10){
 380:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
 384:	8a 30       	cpi	r24, 0x0A	; 10
 386:	50 f1       	brcs	.+84     	; 0x3dc <__vector_10+0x88>
		counter=0;
 388:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter>
		if (air_conadtion_stat){
 38c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 390:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 394:	89 2b       	or	r24, r25
 396:	11 f1       	breq	.+68     	; 0x3dc <__vector_10+0x88>
			temp =(0.25*ADC_u16Read());
 398:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_u16Read>
 39c:	bc 01       	movw	r22, r24
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 56 02 	call	0x4ac	; 0x4ac <__floatunsisf>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	40 e8       	ldi	r20, 0x80	; 128
 3ac:	5e e3       	ldi	r21, 0x3E	; 62
 3ae:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__mulsf3>
 3b2:	0e 94 27 02 	call	0x44e	; 0x44e <__fixunssfsi>
 3b6:	70 93 64 00 	sts	0x0064, r23	; 0x800064 <temp+0x1>
 3ba:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <temp>
			if ( requried_temp>=temp  ){
 3be:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <temp>
 3c2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <temp+0x1>
 3c6:	48 97       	sbiw	r24, 0x18	; 24
 3c8:	28 f4       	brcc	.+10     	; 0x3d4 <__vector_10+0x80>
				LED_vTurnOff(AIR_COND_PORT,AIR_COND_PIN);
 3ca:	62 e0       	ldi	r22, 0x02	; 2
 3cc:	84 e4       	ldi	r24, 0x44	; 68
 3ce:	0e 94 4b 01 	call	0x296	; 0x296 <LED_vTurnOff>
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <__vector_10+0x88>

			}
			else
			{
				LED_vTurnOn(AIR_COND_PORT,AIR_COND_PIN);
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	84 e4       	ldi	r24, 0x44	; 68
 3d8:	0e 94 47 01 	call	0x28e	; 0x28e <LED_vTurnOn>

			}
		}
	}
 3dc:	ff 91       	pop	r31
 3de:	ef 91       	pop	r30
 3e0:	bf 91       	pop	r27
 3e2:	af 91       	pop	r26
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	7f 91       	pop	r23
 3ea:	6f 91       	pop	r22
 3ec:	5f 91       	pop	r21
 3ee:	4f 91       	pop	r20
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <SPI_vInitSlave>:
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
 3fe:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
 400:	6e 9a       	sbi	0x0d, 6	; 13
 402:	08 95       	ret

00000404 <SPI_ui8TransmitRecive>:
}

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
 404:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
 406:	77 9b       	sbis	0x0e, 7	; 14
 408:	fe cf       	rjmp	.-4      	; 0x406 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
 40a:	8f b1       	in	r24, 0x0f	; 15
 40c:	08 95       	ret

0000040e <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
 40e:	8e e4       	ldi	r24, 0x4E	; 78
 410:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
 412:	83 b7       	in	r24, 0x33	; 51
 414:	88 60       	ori	r24, 0x08	; 8
 416:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
 418:	83 b7       	in	r24, 0x33	; 51
 41a:	8f 7b       	andi	r24, 0xBF	; 191
 41c:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
 41e:	83 b7       	in	r24, 0x33	; 51
 420:	81 60       	ori	r24, 0x01	; 1
 422:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 424:	83 b7       	in	r24, 0x33	; 51
 426:	8d 7f       	andi	r24, 0xFD	; 253
 428:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 42a:	83 b7       	in	r24, 0x33	; 51
 42c:	84 60       	ori	r24, 0x04	; 4
 42e:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
 430:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
 432:	89 b7       	in	r24, 0x39	; 57
 434:	82 60       	ori	r24, 0x02	; 2
 436:	89 bf       	out	0x39, r24	; 57
 438:	08 95       	ret

0000043a <timer0_stop>:
}

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
 43a:	83 b7       	in	r24, 0x33	; 51
 43c:	8e 7f       	andi	r24, 0xFE	; 254
 43e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 440:	83 b7       	in	r24, 0x33	; 51
 442:	8d 7f       	andi	r24, 0xFD	; 253
 444:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
 446:	83 b7       	in	r24, 0x33	; 51
 448:	8b 7f       	andi	r24, 0xFB	; 251
 44a:	83 bf       	out	0x33, r24	; 51
 44c:	08 95       	ret

0000044e <__fixunssfsi>:
 44e:	0e 94 c3 02 	call	0x586	; 0x586 <__fp_splitA>
 452:	88 f0       	brcs	.+34     	; 0x476 <__fixunssfsi+0x28>
 454:	9f 57       	subi	r25, 0x7F	; 127
 456:	98 f0       	brcs	.+38     	; 0x47e <__fixunssfsi+0x30>
 458:	b9 2f       	mov	r27, r25
 45a:	99 27       	eor	r25, r25
 45c:	b7 51       	subi	r27, 0x17	; 23
 45e:	b0 f0       	brcs	.+44     	; 0x48c <__fixunssfsi+0x3e>
 460:	e1 f0       	breq	.+56     	; 0x49a <__fixunssfsi+0x4c>
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	88 1f       	adc	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	1a f0       	brmi	.+6      	; 0x472 <__fixunssfsi+0x24>
 46c:	ba 95       	dec	r27
 46e:	c9 f7       	brne	.-14     	; 0x462 <__fixunssfsi+0x14>
 470:	14 c0       	rjmp	.+40     	; 0x49a <__fixunssfsi+0x4c>
 472:	b1 30       	cpi	r27, 0x01	; 1
 474:	91 f0       	breq	.+36     	; 0x49a <__fixunssfsi+0x4c>
 476:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_zero>
 47a:	b1 e0       	ldi	r27, 0x01	; 1
 47c:	08 95       	ret
 47e:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__fp_zero>
 482:	67 2f       	mov	r22, r23
 484:	78 2f       	mov	r23, r24
 486:	88 27       	eor	r24, r24
 488:	b8 5f       	subi	r27, 0xF8	; 248
 48a:	39 f0       	breq	.+14     	; 0x49a <__fixunssfsi+0x4c>
 48c:	b9 3f       	cpi	r27, 0xF9	; 249
 48e:	cc f3       	brlt	.-14     	; 0x482 <__fixunssfsi+0x34>
 490:	86 95       	lsr	r24
 492:	77 95       	ror	r23
 494:	67 95       	ror	r22
 496:	b3 95       	inc	r27
 498:	d9 f7       	brne	.-10     	; 0x490 <__fixunssfsi+0x42>
 49a:	3e f4       	brtc	.+14     	; 0x4aa <__fixunssfsi+0x5c>
 49c:	90 95       	com	r25
 49e:	80 95       	com	r24
 4a0:	70 95       	com	r23
 4a2:	61 95       	neg	r22
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	8f 4f       	sbci	r24, 0xFF	; 255
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	08 95       	ret

000004ac <__floatunsisf>:
 4ac:	e8 94       	clt
 4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <__floatsisf+0x12>

000004b0 <__floatsisf>:
 4b0:	97 fb       	bst	r25, 7
 4b2:	3e f4       	brtc	.+14     	; 0x4c2 <__floatsisf+0x12>
 4b4:	90 95       	com	r25
 4b6:	80 95       	com	r24
 4b8:	70 95       	com	r23
 4ba:	61 95       	neg	r22
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	99 23       	and	r25, r25
 4c4:	a9 f0       	breq	.+42     	; 0x4f0 <__floatsisf+0x40>
 4c6:	f9 2f       	mov	r31, r25
 4c8:	96 e9       	ldi	r25, 0x96	; 150
 4ca:	bb 27       	eor	r27, r27
 4cc:	93 95       	inc	r25
 4ce:	f6 95       	lsr	r31
 4d0:	87 95       	ror	r24
 4d2:	77 95       	ror	r23
 4d4:	67 95       	ror	r22
 4d6:	b7 95       	ror	r27
 4d8:	f1 11       	cpse	r31, r1
 4da:	f8 cf       	rjmp	.-16     	; 0x4cc <__floatsisf+0x1c>
 4dc:	fa f4       	brpl	.+62     	; 0x51c <__floatsisf+0x6c>
 4de:	bb 0f       	add	r27, r27
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__floatsisf+0x36>
 4e2:	60 ff       	sbrs	r22, 0
 4e4:	1b c0       	rjmp	.+54     	; 0x51c <__floatsisf+0x6c>
 4e6:	6f 5f       	subi	r22, 0xFF	; 255
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	16 c0       	rjmp	.+44     	; 0x51c <__floatsisf+0x6c>
 4f0:	88 23       	and	r24, r24
 4f2:	11 f0       	breq	.+4      	; 0x4f8 <__floatsisf+0x48>
 4f4:	96 e9       	ldi	r25, 0x96	; 150
 4f6:	11 c0       	rjmp	.+34     	; 0x51a <__floatsisf+0x6a>
 4f8:	77 23       	and	r23, r23
 4fa:	21 f0       	breq	.+8      	; 0x504 <__floatsisf+0x54>
 4fc:	9e e8       	ldi	r25, 0x8E	; 142
 4fe:	87 2f       	mov	r24, r23
 500:	76 2f       	mov	r23, r22
 502:	05 c0       	rjmp	.+10     	; 0x50e <__floatsisf+0x5e>
 504:	66 23       	and	r22, r22
 506:	71 f0       	breq	.+28     	; 0x524 <__floatsisf+0x74>
 508:	96 e8       	ldi	r25, 0x86	; 134
 50a:	86 2f       	mov	r24, r22
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	2a f0       	brmi	.+10     	; 0x51c <__floatsisf+0x6c>
 512:	9a 95       	dec	r25
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	da f7       	brpl	.-10     	; 0x512 <__floatsisf+0x62>
 51c:	88 0f       	add	r24, r24
 51e:	96 95       	lsr	r25
 520:	87 95       	ror	r24
 522:	97 f9       	bld	r25, 7
 524:	08 95       	ret

00000526 <__fp_inf>:
 526:	97 f9       	bld	r25, 7
 528:	9f 67       	ori	r25, 0x7F	; 127
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	08 95       	ret

00000532 <__fp_nan>:
 532:	9f ef       	ldi	r25, 0xFF	; 255
 534:	80 ec       	ldi	r24, 0xC0	; 192
 536:	08 95       	ret

00000538 <__fp_pscA>:
 538:	00 24       	eor	r0, r0
 53a:	0a 94       	dec	r0
 53c:	16 16       	cp	r1, r22
 53e:	17 06       	cpc	r1, r23
 540:	18 06       	cpc	r1, r24
 542:	09 06       	cpc	r0, r25
 544:	08 95       	ret

00000546 <__fp_pscB>:
 546:	00 24       	eor	r0, r0
 548:	0a 94       	dec	r0
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	14 06       	cpc	r1, r20
 550:	05 06       	cpc	r0, r21
 552:	08 95       	ret

00000554 <__fp_round>:
 554:	09 2e       	mov	r0, r25
 556:	03 94       	inc	r0
 558:	00 0c       	add	r0, r0
 55a:	11 f4       	brne	.+4      	; 0x560 <__fp_round+0xc>
 55c:	88 23       	and	r24, r24
 55e:	52 f0       	brmi	.+20     	; 0x574 <__fp_round+0x20>
 560:	bb 0f       	add	r27, r27
 562:	40 f4       	brcc	.+16     	; 0x574 <__fp_round+0x20>
 564:	bf 2b       	or	r27, r31
 566:	11 f4       	brne	.+4      	; 0x56c <__fp_round+0x18>
 568:	60 ff       	sbrs	r22, 0
 56a:	04 c0       	rjmp	.+8      	; 0x574 <__fp_round+0x20>
 56c:	6f 5f       	subi	r22, 0xFF	; 255
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	8f 4f       	sbci	r24, 0xFF	; 255
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	08 95       	ret

00000576 <__fp_split3>:
 576:	57 fd       	sbrc	r21, 7
 578:	90 58       	subi	r25, 0x80	; 128
 57a:	44 0f       	add	r20, r20
 57c:	55 1f       	adc	r21, r21
 57e:	59 f0       	breq	.+22     	; 0x596 <__fp_splitA+0x10>
 580:	5f 3f       	cpi	r21, 0xFF	; 255
 582:	71 f0       	breq	.+28     	; 0x5a0 <__fp_splitA+0x1a>
 584:	47 95       	ror	r20

00000586 <__fp_splitA>:
 586:	88 0f       	add	r24, r24
 588:	97 fb       	bst	r25, 7
 58a:	99 1f       	adc	r25, r25
 58c:	61 f0       	breq	.+24     	; 0x5a6 <__fp_splitA+0x20>
 58e:	9f 3f       	cpi	r25, 0xFF	; 255
 590:	79 f0       	breq	.+30     	; 0x5b0 <__fp_splitA+0x2a>
 592:	87 95       	ror	r24
 594:	08 95       	ret
 596:	12 16       	cp	r1, r18
 598:	13 06       	cpc	r1, r19
 59a:	14 06       	cpc	r1, r20
 59c:	55 1f       	adc	r21, r21
 59e:	f2 cf       	rjmp	.-28     	; 0x584 <__fp_split3+0xe>
 5a0:	46 95       	lsr	r20
 5a2:	f1 df       	rcall	.-30     	; 0x586 <__fp_splitA>
 5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <__fp_splitA+0x30>
 5a6:	16 16       	cp	r1, r22
 5a8:	17 06       	cpc	r1, r23
 5aa:	18 06       	cpc	r1, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	f1 cf       	rjmp	.-30     	; 0x592 <__fp_splitA+0xc>
 5b0:	86 95       	lsr	r24
 5b2:	71 05       	cpc	r23, r1
 5b4:	61 05       	cpc	r22, r1
 5b6:	08 94       	sec
 5b8:	08 95       	ret

000005ba <__fp_zero>:
 5ba:	e8 94       	clt

000005bc <__fp_szero>:
 5bc:	bb 27       	eor	r27, r27
 5be:	66 27       	eor	r22, r22
 5c0:	77 27       	eor	r23, r23
 5c2:	cb 01       	movw	r24, r22
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <__mulsf3>:
 5c8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__mulsf3x>
 5cc:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_round>
 5d0:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_pscA>
 5d4:	38 f0       	brcs	.+14     	; 0x5e4 <__mulsf3+0x1c>
 5d6:	0e 94 a3 02 	call	0x546	; 0x546 <__fp_pscB>
 5da:	20 f0       	brcs	.+8      	; 0x5e4 <__mulsf3+0x1c>
 5dc:	95 23       	and	r25, r21
 5de:	11 f0       	breq	.+4      	; 0x5e4 <__mulsf3+0x1c>
 5e0:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_inf>
 5e4:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_nan>
 5e8:	11 24       	eor	r1, r1
 5ea:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_szero>

000005ee <__mulsf3x>:
 5ee:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_split3>
 5f2:	70 f3       	brcs	.-36     	; 0x5d0 <__mulsf3+0x8>

000005f4 <__mulsf3_pse>:
 5f4:	95 9f       	mul	r25, r21
 5f6:	c1 f3       	breq	.-16     	; 0x5e8 <__mulsf3+0x20>
 5f8:	95 0f       	add	r25, r21
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	55 1f       	adc	r21, r21
 5fe:	62 9f       	mul	r22, r18
 600:	f0 01       	movw	r30, r0
 602:	72 9f       	mul	r23, r18
 604:	bb 27       	eor	r27, r27
 606:	f0 0d       	add	r31, r0
 608:	b1 1d       	adc	r27, r1
 60a:	63 9f       	mul	r22, r19
 60c:	aa 27       	eor	r26, r26
 60e:	f0 0d       	add	r31, r0
 610:	b1 1d       	adc	r27, r1
 612:	aa 1f       	adc	r26, r26
 614:	64 9f       	mul	r22, r20
 616:	66 27       	eor	r22, r22
 618:	b0 0d       	add	r27, r0
 61a:	a1 1d       	adc	r26, r1
 61c:	66 1f       	adc	r22, r22
 61e:	82 9f       	mul	r24, r18
 620:	22 27       	eor	r18, r18
 622:	b0 0d       	add	r27, r0
 624:	a1 1d       	adc	r26, r1
 626:	62 1f       	adc	r22, r18
 628:	73 9f       	mul	r23, r19
 62a:	b0 0d       	add	r27, r0
 62c:	a1 1d       	adc	r26, r1
 62e:	62 1f       	adc	r22, r18
 630:	83 9f       	mul	r24, r19
 632:	a0 0d       	add	r26, r0
 634:	61 1d       	adc	r22, r1
 636:	22 1f       	adc	r18, r18
 638:	74 9f       	mul	r23, r20
 63a:	33 27       	eor	r19, r19
 63c:	a0 0d       	add	r26, r0
 63e:	61 1d       	adc	r22, r1
 640:	23 1f       	adc	r18, r19
 642:	84 9f       	mul	r24, r20
 644:	60 0d       	add	r22, r0
 646:	21 1d       	adc	r18, r1
 648:	82 2f       	mov	r24, r18
 64a:	76 2f       	mov	r23, r22
 64c:	6a 2f       	mov	r22, r26
 64e:	11 24       	eor	r1, r1
 650:	9f 57       	subi	r25, 0x7F	; 127
 652:	50 40       	sbci	r21, 0x00	; 0
 654:	9a f0       	brmi	.+38     	; 0x67c <__mulsf3_pse+0x88>
 656:	f1 f0       	breq	.+60     	; 0x694 <__mulsf3_pse+0xa0>
 658:	88 23       	and	r24, r24
 65a:	4a f0       	brmi	.+18     	; 0x66e <__mulsf3_pse+0x7a>
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	bb 1f       	adc	r27, r27
 662:	66 1f       	adc	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	91 50       	subi	r25, 0x01	; 1
 66a:	50 40       	sbci	r21, 0x00	; 0
 66c:	a9 f7       	brne	.-22     	; 0x658 <__mulsf3_pse+0x64>
 66e:	9e 3f       	cpi	r25, 0xFE	; 254
 670:	51 05       	cpc	r21, r1
 672:	80 f0       	brcs	.+32     	; 0x694 <__mulsf3_pse+0xa0>
 674:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_inf>
 678:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__fp_szero>
 67c:	5f 3f       	cpi	r21, 0xFF	; 255
 67e:	e4 f3       	brlt	.-8      	; 0x678 <__mulsf3_pse+0x84>
 680:	98 3e       	cpi	r25, 0xE8	; 232
 682:	d4 f3       	brlt	.-12     	; 0x678 <__mulsf3_pse+0x84>
 684:	86 95       	lsr	r24
 686:	77 95       	ror	r23
 688:	67 95       	ror	r22
 68a:	b7 95       	ror	r27
 68c:	f7 95       	ror	r31
 68e:	e7 95       	ror	r30
 690:	9f 5f       	subi	r25, 0xFF	; 255
 692:	c1 f7       	brne	.-16     	; 0x684 <__mulsf3_pse+0x90>
 694:	fe 2b       	or	r31, r30
 696:	88 0f       	add	r24, r24
 698:	91 1d       	adc	r25, r1
 69a:	96 95       	lsr	r25
 69c:	87 95       	ror	r24
 69e:	97 f9       	bld	r25, 7
 6a0:	08 95       	ret

000006a2 <__tablejump2__>:
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	05 90       	lpm	r0, Z+
 6a8:	f4 91       	lpm	r31, Z
 6aa:	e0 2d       	mov	r30, r0
 6ac:	09 94       	ijmp

000006ae <_exit>:
 6ae:	f8 94       	cli

000006b0 <__stop_program>:
 6b0:	ff cf       	rjmp	.-2      	; 0x6b0 <__stop_program>
